import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;

public class Caixote_Server_Thread extends Thread {
	
	/* Specialised Server-Client socket made by server*/
	private Socket connectionSocket;
	private long thread_id = Thread.currentThread().getId();
	
	/* Class Constructor takes the given socket from server */
	public Caixote_Server_Thread(Socket connectionSocket){
		this.connectionSocket = connectionSocket;
	}
	
	/************************** Thread "Main"  ***************************/
	
	/* Method used to get the thread running simultaneously */
	public void run(){
		
		System.out.printf("Thread #%f: Thread is now running\n", thread_id);
		
		/* Create output stream to server */
		
		DataOutputStream outToServer = createSocketOutputStream(connectionSocket);
		
		if (outToServer.equals(null))
			return;
		
		/* Create input stream to server */
		
		DataInputStream inToServer = createSocketInputStream(connectionSocket);
		
		if (inToServer.equals(null))
			return;
		
		
		// PROCESS INFO
		
		
		
		closeSocket(connectionSocket);
	}
	
	/************************ End of Thread "Main"  **********************/
	
	
	/******************** Auxiliary Socket Functions *********************/

	/* Creates Data Output Stream from given "Socket" */
	DataOutputStream createSocketOutputStream(Socket socket){
		DataOutputStream outStream = null;
		try {
			outStream = new DataOutputStream(socket.getOutputStream());
		} catch (IOException e) {
			System.out.printf("Thread #%f: I/O error occured when creating the output stream or socket is not connected\n", thread_id);
			e.printStackTrace();
		}
		
		return outStream;
	}
	
	/* Creates Data Input Stream from given "Socket" */
	DataInputStream createSocketInputStream(Socket socket){
		DataInputStream inStream = null;
		try {
			inStream = new DataInputStream(socket.getInputStream());
		} catch (IOException e) {
			System.out.printf("Thread #%f: I/O error occured when creating the input stream or socket is not connected\n", thread_id);
			e.printStackTrace();
		}
		
		return inStream;
	}
	
	/* Closes Session Socket given "Socket" */
	void closeSocket(Socket socket){
		try {
			socket.close();
		} catch (IOException e) {
			System.out.printf("Thread #%f: I/O error occured when closing a session Socket", thread_id);
			e.printStackTrace();
		}		
	}
	
	/***************** End of Auxiliary Socket Functions *****************/
	
	
}